generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(asesor)
  estado        String    @default("activo")
  id            String    @id @default(uuid()) @db.Uuid
  accounts      Account[]
  sessions      Session[]
  asesores      Asesor[]  @relation("UserAsesores")
}

model Account {
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @db.Uuid
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Asesor {
  id             String   @id @default(uuid()) @db.Uuid
  nombre         String
  email          String   @unique
  estado         String   @default("activo")
  rol            Role     @default(asesor)
  fecha_registro DateTime @default(now())
  updated_at     DateTime @updatedAt
  createdAt      DateTime @default(now())
  userId         String?  @db.Uuid
  image          String?
  user           User?    @relation("UserAsesores", fields: [userId], references: [id])

  @@map("asesores")
}

enum Role {
  admin
  asesor
  owner
}
